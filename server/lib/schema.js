"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_1 = require("apollo-server");
exports.default = apollo_server_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Query {\n    # Returns a page of chats\n    chats(\n      \"\"\"\n      The number of results to show. Must be >= 1. Default = 20\n      \"\"\"\n      pageSize: Int\n      \"\"\"\n      If you add a cursor here, it will only return results _after_ this cursor\n      \"\"\"\n      after: String\n    ): ChatConnection!\n    # Returns a specific chat\n    chat(id: ID!): Chat\n    # Queries for the current user\n    me: User\n  }\n\n  type Mutation {\n    # if false, send message failed -- check errors\n    sendMessage(chat: ID!, content: String!): MessageUpdateResponse!\n    # if false, read receipt failed -- check errors\n    readMessages(chat: ID!, messages: [ID]!): MessageUpdateResponse!\n    login(name: String): String # login token\n  }\n\n  type MessageUpdateResponse {\n    success: Boolean!\n    status: String\n    messages: [Message]\n  }\n\n  \"\"\"\n  Simple wrapper around our list of chats that contains a cursor to the last\n  item in the list. Pass this cursor to the chats query to fetch the results\n  after these.\n  \"\"\"\n  type ChatConnection {\n    cursor: String!\n    hasMore: Boolean!\n    chats: [Chat]!\n  }\n\n  type Chat {\n    id: ID!\n    others: [User]!\n    messages(\n      \"\"\"\n      The number of results to show. Must be >= 1. Default = 20\n      \"\"\"\n      pageSize: Int\n      \"\"\"\n      If you add a cursor here, it will only return results _after_ this cursor\n      \"\"\"\n      after: String\n    ): MessageConnection\n    # Returns a specific message\n    message(id: ID!): Message\n  }\n\n  type User {\n    id: ID!\n    name: String!\n  }\n\n  \"\"\"\n  Simple wrapper around our list of messages that contains a cursor to the last\n  item in the list. Pass this cursor to the messages query to fetch the results\n  after these.\n  \"\"\"\n  type MessageConnection {\n    cursor: String!\n    hasMore: Boolean!\n    messages: [Message]!\n  }\n\n  type Message {\n    id: ID!\n    content: String!\n    read: [ID]! # IDs of everyone who has read the message\n    # TODO: Decide how to handle date+time\n    sent: String!\n  }\n"], ["\n  type Query {\n    # Returns a page of chats\n    chats(\n      \"\"\"\n      The number of results to show. Must be >= 1. Default = 20\n      \"\"\"\n      pageSize: Int\n      \"\"\"\n      If you add a cursor here, it will only return results _after_ this cursor\n      \"\"\"\n      after: String\n    ): ChatConnection!\n    # Returns a specific chat\n    chat(id: ID!): Chat\n    # Queries for the current user\n    me: User\n  }\n\n  type Mutation {\n    # if false, send message failed -- check errors\n    sendMessage(chat: ID!, content: String!): MessageUpdateResponse!\n    # if false, read receipt failed -- check errors\n    readMessages(chat: ID!, messages: [ID]!): MessageUpdateResponse!\n    login(name: String): String # login token\n  }\n\n  type MessageUpdateResponse {\n    success: Boolean!\n    status: String\n    messages: [Message]\n  }\n\n  \"\"\"\n  Simple wrapper around our list of chats that contains a cursor to the last\n  item in the list. Pass this cursor to the chats query to fetch the results\n  after these.\n  \"\"\"\n  type ChatConnection {\n    cursor: String!\n    hasMore: Boolean!\n    chats: [Chat]!\n  }\n\n  type Chat {\n    id: ID!\n    others: [User]!\n    messages(\n      \"\"\"\n      The number of results to show. Must be >= 1. Default = 20\n      \"\"\"\n      pageSize: Int\n      \"\"\"\n      If you add a cursor here, it will only return results _after_ this cursor\n      \"\"\"\n      after: String\n    ): MessageConnection\n    # Returns a specific message\n    message(id: ID!): Message\n  }\n\n  type User {\n    id: ID!\n    name: String!\n  }\n\n  \"\"\"\n  Simple wrapper around our list of messages that contains a cursor to the last\n  item in the list. Pass this cursor to the messages query to fetch the results\n  after these.\n  \"\"\"\n  type MessageConnection {\n    cursor: String!\n    hasMore: Boolean!\n    messages: [Message]!\n  }\n\n  type Message {\n    id: ID!\n    content: String!\n    read: [ID]! # IDs of everyone who has read the message\n    # TODO: Decide how to handle date+time\n    sent: String!\n  }\n"])));
var templateObject_1;
